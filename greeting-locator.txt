========================== get greeting sentences ===============
Given a tab-separated file "train_data_v3_metadata.tsv" with columns: 
conv_id
label
call_duration
reason_level_1
reason_level_2
plain_whisper

Write a function "find_greeting(conversation: str, greeting_phrases: List[str])" that will return the text from the beginning of the string "conversation" until the 2 sentences (configurable as next_k) after a phrase in the specified list of greeting phrases

"getGreeting()" should look in "conversation" for the first occurrence of any of the phrases in the list of greeting_phrases (which will be specified below). Once the phrase is found, the function should return all the text from the beginning of "conversation" to the the of the next k (next_k) sentences that immediately follows the sentence that contains the phrase.

Here is the list of greeting_phrases:
how may I help you today
how can I help you today
what can I do for you
what can I do for you today
what may I do for you today
how can I assist you today
how can I be of assistance ... today
I will be able to assist ... today
how can I provide you ... today
how may I help you in today's call
how may I ... you today
how can I ... you today

The ellipsis ... means up to 4 words. For instance:
"how can I ... you today" can match any of the following:
"how can I be of service to you today"
"how can I provide service to you today"
"how can I help you today"
etc.

We will be looking for the last occurrence of the introductory sentence, and then fetch the next k sentences (where k is an argument to the extraction function).

A sentence is defined according to the following function:
def extract_sentences(text):
	sentences = re.split(r'(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.(?!\d)|\?|!)\s', text)
    return sentences
	
when searching for a sentence in "conversation" that matches the phrase, use case-insensitive comparison and discard punctuations such as commas and periods in order to improve the chances of a match.

Write function "save_greetings(inputFile: str = "train_data_v3_metadata.tsv", outputFile: str)", by applying the function getGreeting defined above to the text from the "plain_whisper" column of each line from the file train_data_v3_metadata.tsv and write the results to another file "conv_greetings.txt" using the tab separated columns:
conv_id
greeting_text

#%%
#====================================================================================
# Locate greeting sentences
#====================================================================================
import re
import csv
from typing import List

# Precompile the regular expression for sentence splitting
sentence_re = re.compile(r'(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.(?!\d)|\?|!)\s')

def extract_sentences(text):
    sentences = sentence_re.split(text)
    return sentences

def getFirstN(conversation: str, n: int) -> str:
    sentences = extract_sentences(conversation)
    return " ".join(sentences[:n])

def find_greeting(conversation: str, conv_id: str, greeting_phrases: List[str], next_k: int = 0) -> str:
    # Replace the ellipsis in greeting phrases with regex
    greeting_phrases = [re.sub(r'\.\.\.', r'(\\w+\\s){0,4}', gp) for gp in greeting_phrases]
    
    sentences = extract_sentences(conversation)

    greeting_text = ""
    for i, sentence in enumerate(sentences):
        for gp in greeting_phrases:
            if re.search(gp.lower(), sentence.lower()):
                greeting_text = " ".join(sentences[:i + next_k + 1])
                break
            else:
                print(conv_id + ' : ' + getFirstN(conversation, 6))
        if greeting_text:
            break
    return greeting_text

def save_greetings(inputFile: str = "train_data_v3_metadata.tsv", outputFile: str = "conv_greetings.txt"):
    greeting_phrases = [
        "how may I help you today",
        "how can I help you today",
        "what can I do for you",
        "what can I do for you today",
        "what may I do for you today",
        "how can I assist you today",
        "how can I be of assistance ... today",
        "I will be able to assist ... today",
        "how can I provide you ... today",
        "how may I help you in today's call",
        "how may I ... you today",
        "how can I ... you today"
    ]

    with open(inputFile, 'r', newline='', encoding='utf-8') as f_in, open(outputFile, 'w', newline='', encoding='utf-8') as f_out:
        tsv_reader = csv.DictReader(f_in, delimiter='\t')
        f_out.write("conv_id\tgreeting_text\n")  # write the header

        for row in tsv_reader:
            greeting_text = find_greeting(row['plain_whisper'], row['conv_id], greeting_phrases)
            f_out.write(f"{row['conv_id']}\t{greeting_text}\n")  # write the row

#%%
dir = '/chunk-complaint/category/'
inputFilename = dir + 'train_data_v3_metadata.tsv'
outputFilename = dir + 'conv_greetings.txt'
save_greetings(inputFilename, outputFilename)