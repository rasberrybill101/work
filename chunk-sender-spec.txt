In the ChunkProcessor class, change the way the chunks are sent in the sendChunk method as follows:
send a batch of chunks immediately such that all chunks in the set have different ids.
Wait for a random interval then send the next batch. For example
send chunk with id 1, chunk with id 2, chunk with id 3 ... chunk with id n
wait a random interval
repeat the process for n distinct ids at a time

private void sendBatch(List<Chunk> chunksToSend, Set<Integer> sentIds) {
    for (Chunk chunk : chunksToSend) {
        if (!sentIds.contains(chunk.getConvID())) {
            receiveChunk(chunk.getConvID(), chunk.getText(), chunk.isEndOfConversation());
            sentIds.add(chunk.getConvID());
        }
    }
}

public void sendChunks(List<Chunk> chunksToSend, int minInterval, int maxInterval) {
    int batchSize = (int) chunksToSend.stream().map(Chunk::getConvID).distinct().count();

    while (true) {
        Set<Integer> sentIds = new HashSet<>();

        while (sentIds.size() < batchSize) {
            sendBatch(chunksToSend, sentIds);
        }

        int interval = ThreadLocalRandom.current().nextInt(minInterval, maxInterval + 1);
        try {
            Thread.sleep(interval);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

public static int findMaxValue(HashMap<String, Integer> map) {
	if (map == null || map.isEmpty()) {
		throw new IllegalArgumentException("The hashmap must not be null or empty.");
	}

	return map.values().stream()
			   .mapToInt(Integer::intValue)
			   .max()
			   .orElseThrow(() -> new NoSuchElementException("Cannot find max value in an empty hashmap"));
}
