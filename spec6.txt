In java 8 create a method "createMovingIntervals" that takes as input:
inputLine - a String
k - number of tokens per chunk
windowSize - maximum number of tokens for each subsequence
history - number of chunks, each of size chunkSize tokens

The method will return a list of strings, where each string is known as a sub-sequence.
At the start of the process:
1) split the comma-separated inputLine into the following columns:
currentLine - a string
label - a number (0 or 1)
convID - a String
2) create inputTokens List<String> by converting the currentLine obtained above into a list of tokens by splitting on space character (any number of continuous spaces eg \\s+)
3) calculate lastFrame = windowSize/k
4) initialize List<String> result = new empty List<String>();

After each subsequence is created as described below, it is added to the result. 
Each subsequence is created as follows:
if subsequence number (n) is less than or equal to "history"
subsequence 1 is tokens 0 through k-1
subsequence 2 is tokens in subsequence 1 + next k tokens
subsequence 3 is tokens in subsequence 2 + next k tokens
...
subsequence n is tokens in sub-sequence n-1 + next k tokens

if subsequence number (n) is greater than "history", then each subsequence is
built by ignoring the first k tokens of the previous subsequence and then adding the next k tokens on the inputTokens List as follows:

subsequence n+1 is the last (k-1)*history tokens in subsequence n + the next k tokens on the inputTokens
subsequence n+2 is the last (k-1)*history tokens in subsequence (n+1) + next k tokens on the inputTokens
subsequence n+3 is the last (k-1)*history tokens in subsequence (n+2) + next k tokens on the inputTokens

subsequence generation stops when the subsequence number == lastFrame

Using these subsequences, append each of the following strings to the result String list. The string to be created from each subsquence is a CSV string that comprises the following columns:
1) space-separated tokens of the subsequence
2) label - obtained from the inputLine label as above
3) chunkStart - the subsequence number
4) chunkEnd - integer value of chunkStart + (num of tokens in subsequence)/k
5) convID - obtained from inputLine convID as above

Each string created using columns (1) through (5) is appended to the result list

The method returns the final result list.

=====================

import java.util.*;
import java.util.stream.*;

public class Main {
    public static void main(String[] args) {
        // testing the method with an example
        List<String> output = createMovingIntervals(createTest(), 2, 20, 3);
        for (String s : output) {
		  System.out.println(s);
		}  
    }

public static List<String> createMovingIntervals(String inputLine, int k, int windowSize, int history) {
    String[] parts = inputLine.split(",");
    String currentLine = parts[0];
    int label = Integer.parseInt(parts[1].trim());
    String convID = parts[2].trim();

    List<String> inputTokens = new ArrayList<>(Arrays.asList(currentLine.split("\\s+")));
    int lastFrame = windowSize / k;

    List<String> result = new ArrayList<>();

    LinkedList<String> subsequence = new LinkedList<>();
    for (int i = 0; i < inputTokens.size(); i++) {
        subsequence.add(inputTokens.get(i));
        if (i >= k - 1) {
            int chunkStart = i / k + 1;
            int chunkEnd = chunkStart + subsequence.size() / k;
            String resLine = String.join(" ", subsequence) + "," + label + "," + chunkStart + "," + chunkEnd + "," + convID;
            result.add(resLine);
            if (chunkStart > history && !subsequence.isEmpty()) {
                for (int j = 0; j < k; j++) {
                    subsequence.removeFirst();
                }
            }
            if (chunkStart == lastFrame) {
                break;
            }
        }
    }
    return result;
}

public static String createTest() {
  StringBuilder sb = new StringBuilder();
  for (int k=1; k < 51; k++) {
	sb.append(" t" + k);
  }
  return sb.toString().trim() + ", 0, conv1";
  }
}
----------------
Given this implementation: 
public class Main {
    public static void main(String[] args) {
        // testing the method with an example
        List<String> output = createMovingIntervals(createTest(), 2, 20, 3);
        for (String s : output) {
		  System.out.println(s);
		}  
    }

public static List<String> createMovingIntervals(String inputLine, int k, int windowSize, int history) {
    String[] parts = inputLine.split(",");
    String currentLine = parts[0];
    int label = Integer.parseInt(parts[1].trim());
    String convID = parts[2].trim();

    List<String> inputTokens = new ArrayList<>(Arrays.asList(currentLine.split("\\s+")));
    int lastFrame = windowSize / k;

    List<String> result = new ArrayList<>();

    LinkedList<String> subsequence = new LinkedList<>();
    for (int i = 0; i < inputTokens.size(); i++) {
        subsequence.add(inputTokens.get(i));
        if (i >= k - 1) {
            int chunkStart = i / k + 1;
            int chunkEnd = chunkStart + subsequence.size() / k;
            String resLine = String.join(" ", subsequence) + "," + label + "," + chunkStart + "," + chunkEnd + "," + convID;
            result.add(resLine);
            if (chunkStart > history && !subsequence.isEmpty()) {
                for (int j = 0; j < k; j++) {
                    subsequence.removeFirst();
                }
            }
            if (chunkStart == lastFrame) {
                break;
            }
        }
    }
    return result;
}

public static String createTest() {
  StringBuilder sb = new StringBuilder();
  for (int k=1; k < 51; k++) {
	sb.append(" t" + k);
  }
  return sb.toString().trim() + ", 0, conv1";
  }
}
together with the input:
t1 t2 t3 t4 t5 ... t50, 0, conv1
I am getting the following wrong output initial subsequences
t1 t2,0,1,2,conv1  this is correct
t1 t2 t3,0,2,3,conv1 this should be t1 t2 t3 t4,0,1,4,conv1
t1 t2 t3 t4,0,2,4,conv1 this should be t1 t2 t3 t4 t5 t6,0,1,6,conv1

Let's fix this first and then we can move on to the remaining problems

----------------------------------

public static List<String> createMovingIntervals(String inputLine, int k, int windowSize, int history) {
    String[] parts = inputLine.split(",");
    String currentLine = parts[0];
    int label = Integer.parseInt(parts[1].trim());
    String convID = parts[2].trim();

    List<String> inputTokens = new ArrayList<>(Arrays.asList(currentLine.split("\\s+")));
    int lastFrame = windowSize / k;

    List<String> result = new ArrayList<>();

    LinkedList<String> subsequence = new LinkedList<>();
    for (int i = 0; i < inputTokens.size(); i += k) {
        for (int j = 0; j < k && i + j < inputTokens.size(); j++) {
            subsequence.add(inputTokens.get(i + j));
        }
        int chunkStart = i / k + 1;
        if (chunkStart <= history) {
            int chunkEnd = chunkStart + subsequence.size() / k - 1;
            String resLine = String.join(" ", subsequence) + "," + label + "," + chunkStart + "," + chunkEnd + "," + convID;
            result.add(resLine);
        } else if (chunkStart > history) {
            for (int j = 0; j < k && !subsequence.isEmpty(); j++) {
                subsequence.removeFirst();
            }
            if (chunkStart <= lastFrame) {
                int chunkEnd = chunkStart + subsequence.size() / k - 1;
                String resLine = String.join(" ", subsequence) + "," + label + "," + chunkStart + "," + chunkEnd + "," + convID;
                result.add(resLine);
            }
        }
    }
    return result;
}
------------
Much better. Well done. But there is still an issue... The outputs now look like this:
t1 t2,0,1,1,conv1 instead of t1 t2,0,1,2,conv1
t1 t2 t3 t4,2,3,conv1 instead of t1 t2 t3 t4,1,4,conv1

There was a mistake in the specification. Instead of:
3) chunkStart - the subsequence number
4) chunkEnd - integer value of chunkStart + (num of tokens in subsequence)/k

This should have been:
if subsequence number (n) is less than or equal to "history"
chunkStart should always be 1
chunkEnd should be equal to k*subsequenceNumber

If subsequence number is greater than "history" -- then we want to set the chunkStart to k tokens ahead of where the previous chunkStart was, and the
chunkEnd 
chunkStart should be equal to (previous chunkStart) + k
chunkEnd should be equal to (previous chunkEnd) + k

FOR EXAMPLE, given
inputLine = "t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11, 0, conv1"
k = 2
windowSize = 20
history = 3

Then createMovingIntervals(inputLine, k, windowSize) should create the following subsequences:
"t1 t2",0,1,2,conv1 -- subsequence is 1, chunkStart is 1, chunkEnd is 2
"t1 t2 t3 t4",0,1,4,conv1 -- subsequence is 2, chunkStart is 1, chunkEnd is 4
"t1 t2 t3 t4 t5 t6",0,1,6,conv1   -- at this point, subsequence number == history, and the number of tokens in the subsequence is history*k. This will be the number of tokens for each other subsequence until all subsequences have been generated.

"t3 t4 t5 t6 t7 t8",0,3,8,conv1   -- chunkStart = previous chunkStart + k, chunkEnd = previous chunkEnd

"t5 t6 t7 t8 t9 t10",0,5,10,conv1
"t7 t8 t9 t10 t11 t12",0,7,12,conv1

-----------------------------------

    public static List<String> createMovingIntervals(String inputLine, int k, int windowSize, int history) {
        String[] parts = inputLine.split(",");
        String currentLine = parts[0];
        String label = parts[1].trim();
        String convID = parts[2].trim();

        List<String> inputTokens = new ArrayList<>(Arrays.asList(currentLine.split("\\s+")));
        int lastFrame = windowSize / k;

        List<String> result = new ArrayList<>();
        LinkedList<String> subsequence = new LinkedList<>();

        int chunkStart = 1;
        int chunkEnd = 0;

        for (int i = 0; i < inputTokens.size(); i += k) {
            for (int j = 0; j < k && i + j < inputTokens.size(); j++) {
                subsequence.add(inputTokens.get(i + j));
            }

            if ((i / k + 1) <= history) {
                chunkEnd = k * (i / k + 1);
            } else {
                chunkStart = chunkStart + k;
                chunkEnd = chunkEnd + k;
            }

            if ((i / k + 1) <= lastFrame) {
                String resLine = String.join(" ", subsequence) + "," + label + "," + chunkStart + "," + chunkEnd + "," + convID;
                result.add(resLine);
            }

            if ((i / k + 1) >= history && !subsequence.isEmpty()) {
                for (int j = 0; j < k && !subsequence.isEmpty(); j++) {
                    subsequence.removeFirst();
                }
            }
        }

        return result;
    }
}

------------------------------

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

public static List<String> createMovingIntervals(String inputLine, int k, int windowSize, int history) {
    String[] parts = inputLine.split(",");
    String currentLine = parts[0];
    String label = parts[1].trim();
    String convID = parts[2].trim();

    List<String> inputTokens = new ArrayList<>(Arrays.asList(currentLine.split("\\s+")));
    int lastFrame = windowSize / k;

    List<String> result = new ArrayList<>();
    LinkedList<String> subsequence = new LinkedList<>();

    int chunkStart = 1;
    int chunkEnd = 0;

    for (int i = 0; i < inputTokens.size(); i += k) {
        for (int j = 0; j < k && i + j < inputTokens.size(); j++) {
            subsequence.add(inputTokens.get(i + j));
        }

        if ((i / k + 1) <= history) {
            chunkEnd = k * (i / k + 1);
        } else {
            chunkStart = chunkStart + k;
            chunkEnd = chunkEnd + k;
        }

        if ((i / k + 1) <= lastFrame) {
            String resLine = "\"" + String.join(" ", subsequence) + "\"," + label + "," + chunkStart + "," + chunkEnd + "," + convID;
            result.add(resLine);
        }

        if ((i / k + 1) >= history && !subsequence.isEmpty()) {
            for (int j = 0; j < k && !subsequence.isEmpty(); j++) {
                subsequence.removeFirst();
            }
        }
    }

    return result;
}
