import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;

import java.io.IOException;
import java.io.StringReader;

public class InputLine {
    String convID;
    String frame;
    int label;
    int predicted;
    double spread;
    double duration;
    int chunkStart;
    int chunkEnd;
    List<String> chunk;
    List<String> history;

    public InputLine(String csvLine, int k) {
        CSVRecord record;
        try {
            CSVParser parser = CSVFormat.DEFAULT
                    .withQuoteMode(CSVFormat.QuoteMode.ALL_NON_NULL)
                    .withQuote('"')
                    .withIgnoreSurroundingSpaces()
                    .parse(new StringReader(csvLine));
            record = parser.getRecords().get(0);
        } catch (IOException e) {
            throw new RuntimeException("Error parsing CSV line", e);
        }

        this.frame = record.get(0);
        this.label = Integer.parseInt(record.get(1));
        this.predicted = Integer.parseInt(record.get(2));
        this.chunkStart = Integer.parseInt(record.get(3));
        this.chunkEnd = Integer.parseInt(record.get(4));
        this.spread = Double.parseDouble(record.get(5));
        this.duration = Double.parseDouble(record.get(6));
        this.convID = record.get(7);

        this.chunk = getChunk(k, frame);
        this.history = getHistory(k, frame);
    }
	
	public static List<String> getChunk(int k, String frame) {
        List<String> tokens = Arrays.asList(frame.split(" "));
        return tokens.subList(Math.max(0, tokens.size() - k), tokens.size());
    }

    public static List<String> getHistory(int k, String frame) {
        List<String> tokens = Arrays.asList(frame.split(" "));
        return tokens.subList(0, Math.max(0, tokens.size() - k));
    }
}

===============================================

public class TransitionFrame {
    String text;
    int start;
    int end;
    int length;
    String type;

    public TransitionFrame(String text, int start, int end, String type) {
        this.text = text;
        this.start = start;
        this.end = end;
        this.length = end - start;
        this.type = type;
    }
}

===============================================

public class Conversation {
    String convID;
    List<InputLine> inputLines;
    List<List<TransitionFrame>> transitionFrameBandList;

    public Conversation(String convID, List<InputLine> inputLines) {
        this.convID = convID;
        this.inputLines = inputLines;
        this.transitionFrameBandList = createTransitionFrameBandList(inputLines);
    }

    public static List<List<TransitionFrame>> createTransitionFrameBandList(List<InputLine> inputLines) {
        List<List<TransitionFrame>> resultList = new ArrayList<>();
        List<TransitionFrame> currentTransitionBand = null;
        InputLine previous = null;

        for (InputLine current : inputLines) {
            if (previous != null && previous.predicted == 0 && current.predicted == 1) {
                currentTransitionBand = new ArrayList<>();
                TransitionFrame currentTransitionFrame = createTransitionFrame(previous, current);
                currentTransitionBand.add(currentTransitionFrame);
            }

            if (currentTransitionBand != null && previous.predicted == 1 && current.predicted == 1) {
                TransitionFrame currentTransitionFrame = createTransitionFrame(previous, current);
                currentTransitionBand.add(currentTransitionFrame);
            }

            if (currentTransitionBand != null && previous.predicted == 1 && current.predicted == 0) {
                TransitionFrame currentTransitionFrame = createTransitionFrame(previous, current);
                currentTransitionBand.add(currentTransitionFrame);
                resultList.add(currentTransitionBand);
                currentTransitionBand = null;
            }
            previous = current;
        }
        return resultList;
    }

    public static TransitionFrame createTransitionFrame(InputLine previous, InputLine current) {
        String type;
        if (previous.predicted == 0 && current.predicted == 1) {
            type = "UP";
        } else if (previous.predicted == 1 && current.predicted == 1) {
            type = "HOLD";
        } else if (previous.predicted == 1 && current.predicted == 0) {
            type = "DOWN";
        } else {
            type = "UNKNOWN";
        }

        return new TransitionFrame(current.frame, current.chunkStart, current.chunkEnd, type);
    }
}