Using java 8, create a GUI main window (800x600) which contains 3 panels:
Top panel is positioned at the top of the main window and has the same width. It is 20% of the height of the main window.
Left panel is positioned on the left of the window. It is 80% of the height of the main window and 20% of the width of the main window. It's left edge is coincident with the left edge of the main window.
Right panel fills the remainder of the space (right of the left panel and below the top panel).

Display the following in each panel:
Top panel: "conversation1_id TN TN TN FN FN FN TP TP TP FN FN FN TP TP  FN TP TP TP FN FN FN TP TP  FN TP TP TP FN FN FN TP TP"

Left Panel: List of strings, one per line
"conversation_1_id"
"conversation_3_id"
"conversation_4_id"
"conversation_5_id"
...
"conversation_698_id"

Right panel:
"Turning and turning in the widening gyre   
The falcon cannot hear the falconer;
Things fall apart; the centre cannot hold;
Mere anarchy is loosed upon the world,
The blood-dimmed tide is loosed, and everywhere   
The ceremony of innocence is drowned;
The best lack all conviction, while the worst   
Are full of passionate intensity.

Surely some revelation is at hand;
Surely the Second Coming is at hand.   
The Second Coming! Hardly are those words out   
When a vast image out of Spiritus Mundi
Troubles my sight: somewhere in sands of the desert   
A shape with lion body and the head of a man,   
A gaze blank and pitiless as the sun,   
Is moving its slow thighs, while all about it   
Reel shadows of the indignant desert birds.   
The darkness drops again; but now I know   
That twenty centuries of stony sleep
Were vexed to nightmare by a rocking cradle,   
And what rough beast, its hour come round at last,   
Slouches towards Bethlehem to be born?"

Adjust the width of the left panel to be as wide as each button. When a button is clicked, make its color black and its text white. when a button is not clicked, make its background white and its text black so it looks like a label rather than a button.
remove the scrollbar from the left panel and make its background white. Only the most recently clicked button should have white text on black background.
Add a split pane between the left and right panels.

Write 2 methods. "setupFonts" will read in all the font files (*.ttf) found in the resources /fonts location. "setPanelFont" will take a textArea (or button), font name, weight, and size as inputs and will set the font of the textArea or button as specified. weight will be either "normal" or "bold". size will be a positive integer.



=========================
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.SplitPane;
import javafx.scene.control.TextArea;
import javafx.scene.control.ScrollPane.ScrollBarPolicy;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.List;

public class Main extends Application {

    private Button lastClickedButton = null;
	private Label topLabel;
	private VBox rightVBox;
	private ListView leftListView;
	private VBox leftVBox;
	
	private static String rightText = "sample right panel text";

    public static void main(String[] args) {
        launch(args);
    }

// correct implementation - ensure that left panel height, width are correct
	@Override
	public void start(Stage primaryStage) throws Exception {
		setupFonts();

		BorderPane borderPane = new BorderPane();

		Label topLabel = new Label();
		setTopText(topLabel, "conversation1_id TN TN TN FN FN FN TP TP TP FN FN FN TP TP  FN TP TP TP FN FN FN TP TP  FN TP TP TP FN FN FN TP TP");
		setTopFont(topLabel, "Consolas", "normal", 12);
		borderPane.setTop(topLabel);
		
		VBox leftVBox = new VBox();
		Set<String> leftPanelStrings = getSampleSetOfStrings(); // existing method
		setupLeftPanel(leftVBox, leftPanelStrings);

		ScrollPane leftScrollPane = new ScrollPane(leftVBox);
		leftScrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
		leftScrollPane.setFitToHeight(true); // ensure ScrollPane takes up all available vertical space
		leftScrollPane.setFitToWidth(true); // ensure ScrollPane takes up all available horizontal space
		leftScrollPane.setStyle("-fx-background-color: white; -fx-background: white;");

		rightVBox = new VBox();

		SplitPane splitPane = new SplitPane();
		splitPane.getItems().addAll(leftScrollPane, rightVBox);
		splitPane.setDividerPositions(0.25);

		borderPane.setCenter(splitPane);

		Scene scene = new Scene(borderPane, 800, 600);
		primaryStage.setScene(scene);
		primaryStage.show();
	}

	private void setupFonts() {
		String[] fontFiles = { "font1.ttf", "font2.ttf", "font3.ttf" };  // replace with your actual font files

		for (String fontFile : fontFiles) {
			try {
				InputStream fontStream = getClass().getResourceAsStream("/fonts/" + fontFile);
				if (fontStream != null) {
					Font font = Font.loadFont(fontStream, 12);
					System.out.println("Loaded font: " + font.getName());
				} else {
					System.out.println("Could not load font: " + fontFile);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

    private void setPanelFont(Text text, String fontName, String fontWeight, int fontSize) {
        text.setFont(Font.font(fontName, fontWeight.equals("bold") ? FontWeight.BOLD : FontWeight.NORMAL, fontSize));
    }

    private void setTopText(Label topLabel, String text) {
        topLabel.setText(text);
        setPanelFont(topLabel, "yourFontName", "normal", 12);  
    }

    private void setRightText(TextArea rightTextArea, String text) {
        rightTextArea.setText(text);
        rightTextArea.setEditable(false);
        rightTextArea.setWrapText(true);
        setPanelFont(rightTextArea, "yourFontName", "normal", 12);  
    }

    private void setupLeftPanel(VBox leftVBox, Set<String> keys) {
        for (String key : keys) {
            Button button = new Button(key);
            button.setMaxWidth(Double.MAX_VALUE);
            setPanelFont(button, "yourFontName", "normal", 12);  
            button.setStyle("-fx-background-color: white; -fx-text-fill: black;");
            button.setOnAction(e -> {
                if (lastClickedButton != null) {
                    lastClickedButton.setStyle("-fx-background-color: white; -fx-text-fill: black;");
                }
                button.setStyle("-fx-background-color: black; -fx-text-fill: white;");
                lastClickedButton = button;
            });
            leftVBox.getChildren().add(button);
        }
    }
}

------ update setupFonts
private void setupFonts() {
    String[] fontFiles = { "font1.ttf", "font2.ttf", "font3.ttf" };  // replace with your actual font files

    for (String fontFile : fontFiles) {
        try {
            InputStream fontStream = getClass().getResourceAsStream("/fonts/" + fontFile);
            if (fontStream != null) {
                Font font = Font.loadFont(fontStream, 12);
                System.out.println("Loaded font: " + font.getName());
            } else {
                System.out.println("Could not load font: " + fontFile);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

----------------------------------- hiliting .....
public class HighlightInfo {
    private final int start;
    private final int end;
    private final String color;
    private final String backgroundColor;

    public HighlightInfo(int start, int end, String color, String backgroundColor) {
        this.start = start;
        this.end = end;
        this.color = color;
        this.backgroundColor = backgroundColor;
    }

    public int getStart() {
        return start;
    }

    public int getEnd() {
        return end;
    }

    public String getColor() {
        return color;
    }

    public String getBackgroundColor() {
        return backgroundColor;
    }
}

private void highlightWords(String content, List<HighlightInfo> highlights) {
    TextFlow textFlow = new TextFlow();
    int lastEnd = 0;

    // Sort highlights by start index
    highlights.sort(Comparator.comparingInt(HighlightInfo::getStart));

    for (HighlightInfo highlight : highlights) {
        Text textBefore = new Text(content.substring(lastEnd, highlight.getStart()));
        Label highlightedText = new Label(content.substring(highlight.getStart(), highlight.getEnd()));
        highlightedText.setTextFill(Color.web(highlight.getColor()));
        highlightedText.setStyle("-fx-background-color: " + highlight.getBackgroundColor() + ";");
        textFlow.getChildren().addAll(textBefore, highlightedText);

        lastEnd = highlight.getEnd();
    }

    // Add remaining text
    Text textAfter = new Text(content.substring(lastEnd));
    textFlow.getChildren().add(textAfter);

    rightVBox.getChildren().clear();  // clear previous content
    rightVBox.getChildren().add(textFlow);
}

---------------------  Using a listview instead of a leftVBox

private void setupLeftPanel(VBox leftVBox, Set<String> keys) {
    ObservableList<String> items = FXCollections.observableArrayList(keys);
    ListView<String> listView = new ListView<>(items);
    listView.setCellFactory(param -> new ListCell<String>() {
        private final Label label;
        {
            contentDisplayProperty().bind(Bindings.when(emptyProperty()).then(ContentDisplay.TEXT_ONLY).otherwise(ContentDisplay.GRAPHIC_ONLY));
            label = new Label();
            label.textFillProperty().bind(Bindings.when(selectedProperty()).then(Color.WHITE).otherwise(Color.BLACK));
        }

        @Override
        protected void updateItem(String item, boolean empty) {
            super.updateItem(item, empty);
            if (empty || item == null) {
                setText(null);
                setGraphic(null);
            } else {
                label.setText(item);
                label.setFont(Font.font("yourFontName", FontWeight.NORMAL, 12)); 
                setGraphic(label);
            }
        }
    });

    listView.getSelectionModel().selectedItemProperty().addListener(
        (observable, oldValue, newValue) -> {
            // Here you can handle the selection change.
            // newValue contains the value of the item that has been selected.
            System.out.println("Selected item: " + newValue);
        }
    );

    listView.setMaxHeight(Double.MAX_VALUE);
    SplitPane.setResizableWithParent(leftVBox, Boolean.FALSE);
    leftVBox.getChildren().add(listView);
}



=======================================================================================================
Given two csv input file, where:
The first file is named "metrics_data.txt" comprising of a header line:
convID,s1,s2,s3,....,s42
where:
convID is a string
s1...s42 are strings with possible values "TN","FN","TP","FP","--"
together with lines of data laid out according to the header.

The second csv file is named "performance_data.txt". It has no header line and has the following structure of csv data:
conversation,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID
conversation is a quoted string
ground_truth is 0 or 1
prediction is 0 or 1
chunkStart is an integer
chunkEnd is an integer
convID a string representing the ID of the conversation
The only lines to be used in the second csv file are the very last line of each convID. For example if the following lines are in "performance_data.txt" :
conversation_piece1,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID1
conversation_piece2,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID1
conversation_piece3,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID1
conversation_piece1,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID2
conversation_piece2,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID2
conversation_piece3,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID2
conversation_piece2,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID2
conversation_piece3,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID3
conversation_piece1,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID3
conversation_piece2,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID3
conversation_piece4,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID3

Then the only lines to be used are the very last lines for each convID:
conversation_piece3,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID1
conversation_piece3,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID2
conversation_piece4,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID3

Using python tkinter, create a main window which contains 3 frames:
Top frame is positioned at the top of the main window and has the same width. It is 20% of the height of the main window.
Left frame is positioned on the left of the window. It is 80% of the height of the main window and 20% of the widthe of the main window. It's left edge is coincident with the left edge of the main window.
Right frame fills the remainder of the space (right of the left frame and below the top frame).

The data to be displayed in each frame is as follows:
On the top frame display the contents of the first csv file. Provide a scroll bar so that we can scroll from first line to last line. Set the background and text colors of the strings after the first column (ie s1,s2,...s42) as follows:
for convID label, background is light gray and text is black
for the remaining items s1,s2,..s42:
if btn label == "TN", background is light gray, text is dark gray
if btn label == "TP", background is black, text is red
if btn label == "FP", background is black, text is yellow
if btn label == "FN", background is cyan, text is red
if btn label == "--", background is light white, text is dark gray

The left frame contains a list of the convID values from the first csv file, one per line. Also provide a scroll bar on the left frame. Make each entry on the left frame a clickable button.

The right frame will contain the "conversation" column of the last line in the second csv file that has convID equal to the convID of the button clicked in either the top frame or the left frame. The start and end quotes will be stripped from the text for the convID before it is displayed.
Consider the text in the right frame to be a sequence of space separated tokens. The starting index is 1. This means that the very first token is numbered 1, the second token is numbered 2, etc.
Use the index position of the s1,s2,...s42 labels in the top frame to color the background and text color of tokens in the right frame as follows
start_position = index of the label
end_position = index of the label + 1
From start_position to end_position, set the background and text color to match the colors used for the corresponding button label

Whenever a button is clicked on the left frame, then display the corresponding conversation on the right frame using the color scheme as described above.


==============================================================================================================
Given two csv input file, where:
The first file is named "metrics_data.txt" comprising of a header line:
convID,s1,s2,s3,....,s42
where:
convID is a string
s1...s42 are strings with possible values "TN","FN","TP","FP","--"
together with lines of data laid out according to the header.

The second csv file is named "performance_data.txt". It has no header line and has the following structure of csv data:
conversation,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID
conversation is a quoted string
ground_truth is 0 or 1
prediction is 0 or 1
chunkStart is an integer
chunkEnd is an integer
convID a string representing the ID of the conversation
The only lines to be used in the second csv file are the very last line of each convID. For example if the following lines are in "performance_data.txt" :
conversation_piece1,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID1
conversation_piece2,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID1
conversation_piece3,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID1
conversation_piece1,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID2
conversation_piece2,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID2
conversation_piece3,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID2
conversation_piece2,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID2
conversation_piece3,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID3
conversation_piece1,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID3
conversation_piece2,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID3
conversation_piece4,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID3

Then the only lines to be used are the very last lines for each convID:
conversation_piece3,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID1
conversation_piece3,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID2
conversation_piece4,ground_truth,predicted,chunkStart,chunkEnd,diff,elapsedMillis,convID3

Using python tkinter, create a main window which contains 3 frames:
Top frame is positioned at the top of the main window and has the same width. It is 20% of the height of the main window.
Left frame is positioned on the left of the window. It is 80% of the height of the main window and 20% of the widthe of the main window. It's left edge is coincident with the left edge of the main window.
Right frame fills the remainder of the space (right of the left frame and below the top frame).

The data to be displayed in each frame is as follows:
On the top frame display the contents of the first csv file. Provide a scroll bar so that we can scroll from first line to last line. Make each of the strings after the first column (ie s1,s2,...s42) clickable buttons whose labels match the value of each item on the line: convID,s1,s2...s42. Do not create clickable labeled buttons for any value "--". Use flat style. The background color and text color for the different button labels (btn labels) are as follows:
for convID label, background is light gray and text is black
for the remaining items s1,s2,..s42:
if btn label == "TN", background is light gray, text is dark gray
if btn label == "TP", background is black, text is red
if btn label == "FP", background is black, text is yellow
if btn label == "FN", background is cyan, text is red
if btn label == "--", background is light white, text is dark gray

The left frame contains a list of the convID values from the first csv file, one per line. Also provide a scroll bar on the left frame. Make each entry on the left frame also clickable.

The right frame will contain the "conversation" column of the last line in the second csv file that has convID equal to the convID of the button clicked in either the top frame or the left frame. The start and end quotes will be stripped from the text for the convID before it is displayed.
Consider the text in the right frame to be a sequence of space separated tokens. The starting index is 1. This means that the very first token is numbered 1, the second token is numbered 2, etc.
Use the index position of the s1,s2,...s42 labels in the top frame to color the background and text color of tokens in the right frame as follows
start_position = index of the label
end_position = index of the label + 1
From start_position to end_position, set the background and text color to match the colors used for the corresponding button label

Whenever a button is clicked on the left frame, then display the corresponding conversation on the right frame using the color scheme as described above.

===============================

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.IntStream;

public class FindContiguousSequenceExample {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("TP");
        list.add("A");
        list.add("B");
        list.add("TP");
        list.add("TP");
        list.add("C");
        list.add("D");
        list.add("TP");

        Map.Entry<Integer, Integer> result = findContiguousSequence(list, "TP");
        if (result != null) {
            int firstIndex = result.getKey();
            int lastIndex = result.getValue();
            System.out.println("First index: " + firstIndex);
            System.out.println("Last index: " + lastIndex);
        } else {
            System.out.println("No contiguous sequence found.");
        }
    }

    public static Map.Entry<Integer, Integer> findContiguousSequence(List<String> list, String target) {
        int firstIndex = IntStream.range(0, list.size())
                .filter(i -> list.get(i).equals(target))
                .findFirst()
                .orElse(-1);

        if (firstIndex == -1) {
            return null; // Target not found in the list
        }

        int lastIndex = IntStream.rangeClosed(firstIndex, list.size() - 1)
                .filter(i -> !list.get(i).equals(target))
                .findFirst()
                .orElse(list.size() - 1);

        return new AbstractMap.SimpleEntry<>(firstIndex, lastIndex);
    }
}

