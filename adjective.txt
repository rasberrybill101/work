Given a comma-separated text file whose file is dependent on the function arg "base_filename" as described below.
The input file comprises of lines, each of which has the following structure:
conversation_filename,"1","2","3","4","5","6",...,"42" => this is the header line
conv_1,s1,s2,s3,s4,......,s42 => these are all the other lines
where the value of s1 through s42 (or to the final column) in all other lines can have one of the following 5 values:
"TP", "FP", "TN", "FN", or "--"

Write the function "adjective(base_filename: s ="base_filename", k=5)" that will:
Open an input file named base_filename + "_predicted_raw_metrics.txt" which contains the rows described as above
Write each row to an output file named base_filename + "_predicted_final_metrics.txt" as follows:
Write the header unchanged
Make 2 sweeps over all the remaining lines as follows:
1) Sweep 1:
Replace the first k columns after conv_id (ie. s1 through sk) with "TN"
Leave the other columns unchanged to the output file

2) Sweep 2:
Replace all "FN" values before the very first occurrence of "TP"

Write the final column values to the output file.

Modify the following working implementation to write the function:

#=======================================================================
# Create delay in prediction for output
#=======================================================================

def adjective(base_filename, k=5):
    # Open the input and output files
	inputFilename = base_filename + "_predicted_raw_metrics.txt"
	outputFilename = base_filename + "_predicted_final_metrics.txt"
    with open(inputFilename, 'r') as infile, \
         open(outputFilename, 'w') as outfile:

        # Initialize a flag for the header line
        is_header = True

        # Process each row in the input file
        for line in infile:
            # Split the line into fields
            fields = line.strip().split(',')
            
            # If it's not the header line, replace the first k fields with "TN"
            if not is_header:
                fields[1:k+1] = ['TN'] * k  # Column indices start from 0
            else:
                is_header = False
            
            # Write the modified line to the output file
            outfile.write(','.join(fields) + '\n')
	print('final performance written to: ' + outputFilename)