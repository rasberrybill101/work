Given a conv. id, check if a given substring is present in any of the chunks associated with the conversation.
Confirm that what is reported as "chunk" and "history" actually match what is expected.
Compare the prediction from the batch model to the labeled ground truth.
Use a heat map to highlight the differences.
Use a confusion matrix to provide numerical metrics from the heat map.
For the heat map, compare (chunk conv id label) to (conv id label)
Number of UP chunks in a conversation
Number of tokens before the first UP chunk
Length of the first UP chunk should be equal to, or greater than the number of history chunks (this is the "effective sustained" length of the traveling chunk.
Are there transition frames more significant than the first transition frame? What determines such significance.

check if a word contains a character

======================================================

The goal is to convert a conversation into a vector representation through a function called "convToVector". A conversation is a list of sentences. A sentence is a list of tokens extracted using the function "getSentence" defined below. The vector representing a conversation is built up from the vectors representation of the individual sentences in the conversation as follows: 

There is a dictionary of name-value pairs ("signalsDictionary") whose keys are "s1","s2","s3", ... "sN"  where s1 through sN are the keys (the "signals"). For instance, if there were 10 signals, then the keys would be s1 through s10. For each key, the value is a comma separated (csv) string where each element in the csv string is a phrase. A vector of length N is initialized to zero as follows:
convVector = [0 0 0 0 ... 0]
Each sentence is checked for the occurrence of one or more phrases associated with a key. If a phrase is found (sentence contains the entire phrase), 