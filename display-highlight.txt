function highlightText(text) {
  if (!pdfInstance) {
    console.error('PDF document not loaded');
    return;
  }
  if (!canvas || !context) {
    console.error('Canvas element not found');
    return;
  }

  // Create a temporary canvas for highlighting
  let tempCanvas = document.createElement('canvas');
  let tempContext = tempCanvas.getContext('2d');
  tempCanvas.width = canvas.width;
  tempCanvas.height = canvas.height;

  // Clear previous highlights
  tempContext.clearRect(0, 0, tempCanvas.width, tempCanvas.height);

  // Iterate through each page of the PDF
  let numPages = pdfInstance.numPages;

  // Define an array to store the highlight promises
  let highlightPromises = [];

  for (let pageNum = 1; pageNum <= numPages; pageNum++) {
    highlightPromises.push(
      pdfInstance.getPage(pageNum)
        .then(function (page) {
          let viewport = page.getViewport({ scale: 1 });

          return page.getTextContent()
            .then(function (textContent) {
              let renderContext = {
                canvasContext: tempContext,
                viewport: viewport,
              };

              // Render the page on the temporary canvas
              return page.render(renderContext)
                .promise
                .then(function () {
                  textContent.items.forEach(function (textItem) {
                    if (textItem.str.includes(text)) {
                      let rect = viewport.convertToViewportRectangle(textItem.transform);

                      tempContext.save();
                      tempContext.fillStyle = 'rgba(255, 255, 0, 0.5)';
                      tempContext.fillRect(rect[0], rect[1], rect[2] - rect[0], rect[3] - rect[1]);
                      tempContext.restore();
                    }
                  });
                });
            })
            .catch(function (error) {
              console.error(error);
            });
        })
    );
  }

  // Wait for all highlight promises to resolve
  Promise.all(highlightPromises)
    .then(function () {
      // Draw the original canvas
      context.clearRect(0, 0, canvas.width, canvas.height);
      context.drawImage(tempCanvas, 0, 0);
      console.log('Text highlighted successfully');
    })
    .catch(function (error) {
      console.error('Error highlighting text:', error);
    });
}