function displayPdf(url) {
  pdfDisplayed = true;
  let container = document.getElementById('middle-left');
  container.innerHTML = '';

  // Create a hidden canvas for rendering the PDF
  let hiddenCanvas = document.createElement('canvas');
  hiddenCanvas.style.display = 'none';
  container.appendChild(hiddenCanvas);

  // Load the PDF document
  pdfjsLib.getDocument(url)
    .promise.then(function (pdf) {
      pdfInstance = pdf;

      // Fetch the first page
      pdf.getPage(1).then(function (page) {
        let viewport = page.getViewport({ scale: 1 });

        // Set hidden canvas dimensions
        hiddenCanvas.height = viewport.height;
        hiddenCanvas.width = viewport.width;

        // Render the PDF page on the hidden canvas
        let renderContext = {
          canvasContext: hiddenCanvas.getContext('2d'),
          viewport: viewport
        };
        page.render(renderContext).promise.then(function () {
          console.log('PDF rendered successfully');
        });
      });
    })
    .catch(function (error) {
      console.error(error);
    });
}

function highlightText(text) {
  if (!pdfInstance) {
    console.error('PDF document not loaded');
    return;
  }

  let hiddenCanvas = document.querySelector('#middle-left canvas');
  let hiddenContext = hiddenCanvas.getContext('2d');
  let canvas = document.querySelector('#pdf-canvas');
  let context = canvas.getContext('2d');

  // Clear previous highlights
  context.clearRect(0, 0, canvas.width, canvas.height);

  // Iterate through each page of the PDF
  let numPages = pdfInstance.numPages;

  // Define an array to store the highlight promises
  let highlightPromises = [];

  for (let pageNum = 1; pageNum <= numPages; pageNum++) {
    highlightPromises.push(
      pdfInstance.getPage(pageNum)
        .then(function (page) {
          let viewport = page.getViewport({ scale: 1 });

          return page.getTextContent()
            .then(function (textContent) {
              textContent.items.forEach(function (textItem) {
                if (textItem.str.includes(text)) {
                  let rect = viewport.convertToViewportRectangle(textItem.transform);

                  context.save();
                  context.fillStyle = 'rgba(255, 255, 0, 0.5)';
                  context.fillRect(rect[0], rect[1], rect[2] - rect[0], rect[3] - rect[1]);
                  context.restore();
                }
              });
            })
            .catch(function (error) {
              console.error(error);
            });
        })
    );
  }

  // Wait for all highlight promises to resolve
  Promise.all(highlightPromises)
    .then(function () {
      console.log('Text highlighted successfully');
    })
    .catch(function (error) {
      console.error('Error highlighting text:', error);
    });
}