function highlightText(text) {
  if (!pdfInstance) {
    console.error('PDF document not loaded');
    return;
  }
  if (!canvas || !context) {
    console.error('Canvas element not found');
    return;
  }

  // Clear previous highlights
  context.clearRect(0, 0, canvas.width, canvas.height);

  // Iterate through each page of the PDF
  let numPages = pdfInstance.numPages;

  // Define an array to store the highlight promises
  let highlightPromises = [];

  for (let pageNum = 1; pageNum <= numPages; pageNum++) {
    highlightPromises.push(
      pdfInstance.getPage(pageNum)
        .then(function (page) {
          let viewport = page.getViewport({ scale: 1 });
          let transform = viewport.transform;

          return page.getTextContent()
            .then(function (textContent) {
              context.save();
              context.fillStyle = 'rgba(255, 255, 0, 0.5)';
              context.lineWidth = 1;
              context.strokeStyle = 'rgba(255, 255, 0, 1)';

              textContent.items.forEach(function (textItem) {
                if (textItem.str.includes(text)) {
                  let rect = viewport.convertToViewportRectangle(textItem.transform);

                  context.beginPath();
                  context.rect(rect[0], rect[1], rect[2] - rect[0], rect[3] - rect[1]);
                  context.fill();
                  context.stroke();
                }
              });

              context.restore();
            })
            .catch(function (error) {
              console.error(error);
            });
        })
    );
  }

  // Wait for all highlight promises to resolve
  Promise.all(highlightPromises)
    .then(function () {
      console.log('Text highlighted successfully');
    })
    .catch(function (error) {
      console.error('Error highlighting text:', error);
    });
}