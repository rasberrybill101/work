code for a simple site that has 4 areas. A top edit box will be at the top and run the entire width. It should be 2 lines high. The middle area will be split into 2 vertical areas. The left area will display a displays a PDF document, and a right area will display text. Each window will be full height of browser and half the browser width. Put a divider bar that can be dragged left or right to change the width either window. Use PDF.js or similar to display the PDF. The bottom area will run the entire width and will contain an edit area that will enable the location of the PDF document to be entered. On the right of the bottom area will be a button, which when clicked will display the PDF document that has been entered in the bottom left area. Thus the simple site will have 3 areas : top, middle, and bottom. Where:
top is a text input field that fills the entire width and is 1 line high
bottom consists of a text input field on the left and a button on the right. bottom will fill the entire width
middle fills the all the remaining space between top and bottom. It is split into 2 vertical areas. There will be a divider between the 2 areas that can be pulled left and right to adjust the horizontal size of each area such that both areas always fill the entire width of the middle. The position of the vertical divider will determine the width of each area. The middle left area will contain a pdf document whose location is specified in the bottom input text box. The right area will contain text.
I am open to the use of PDF.js for displaying the PDF.

The html, css, and javascript will be in the directory "app", and the pdfs will be in the directory "app/pdfs". I have a server spun up with "python -m http.server 9009" started in directory "app".

========================index.html
<!-- index.html -->
<!DOCTYPE html>
<html>
<head>
    <title>Simple Site</title>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
    <div id="top">
        <textarea id="top-input" rows="2"></textarea>
    </div>

    <div id="middle">
        <div id="middle-left">
            <canvas id="pdf-renderer"></canvas>
        </div>
        <div id="middle-right">
            <textarea id="middle-right-input"></textarea>
        </div>
    </div>

    <div id="bottom">
        <textarea id="pdf-location-input"></textarea>
        <button id="load-pdf">Load PDF</button>
    </div>

    <script src="jquery.min.js"></script>
    <script src="jquery-ui.js"></script>
    <script src="pdf.js"></script>
    <script src="main.js"></script>
</body>
</html>

===================style.css
html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden;
}

#top, #bottom {
    width: 100%;
}

#top-input, #pdf-location-input, #middle-right-input {
    width: 100%;
}

#middle {
    display: flex;
    height: calc(100% - 4em); /* Adjust as per the height of top and bottom */
}

#middle-left, #middle-right {
    flex: 1;
    overflow: auto;
}

#middle-right {
    border-left: 1px solid #000;
    resize: horizontal;
    overflow: auto;
}

#pdf-renderer {
    width: 100%;
}

===================== main.js
$(function() {
    var pdfjsLib = window['pdfjs-dist/build/pdf'];

    // The workerSrc property shall be specified.
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'pdf.worker.js';

    $("#load-pdf").click(function() {
        var url = $("#pdf-location-input").val();

        // Asynchronously downloads PDF.
        var loadingTask = pdfjsLib.getDocument(url);
        loadingTask.promise.then(function(pdf) {
            console.log('PDF loaded');
            
            // Fetch the first page
            var pageNumber = 1;
            pdf.getPage(pageNumber).then(function(page) {
                console.log('Page loaded');
                
                var scale = 1.5;
                var viewport = page.getViewport({scale: scale});

                // Prepare canvas using PDF page dimensions
                var canvas = $("#pdf-renderer")[0];
                var context = canvas.getContext('2d');
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                // Render PDF page into canvas context
                var renderContext = {
                    canvasContext: context,
                    viewport: viewport
                };
                var renderTask = page.render(renderContext);
                renderTask.promise.then
                renderTask.promise.then(function () {
                    console.log('Page rendered');
                });
            });
        }, function (reason) {
            // PDF loading error
            console.error(reason);
        });
    });

    // Handle resizing of the middle-right area
    $('#middle-right').resizable({
        handles: 'w',
        resize: function (event, ui) {
            $('#middle-left').width($('#middle').width() - ui.size.width);
        }
    });
});

Some updates:
jquery library is named "jquery-3.7.0.min"
Please make the following modifications:
1) remove the bottom edit/button, and instead split the right side of the middle vertical area (which now extends from just below the bottom of the top edit all the way to the bottom) into two parts horizontally to create a "middle_right_upper" and "middle_right_lower" part. Use the "middle_right_upper" part to display some text. On the "middle_right_lower" part, show the list of files in the "app/pdfs" folder. Enable clicking on a filename to display the pdf file on the middle left window.

2) Use Bootstrap CSS framework for the UI

###################################################################################
------------ index.html
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FUEL Prototype</title>
    <link rel="stylesheet" href="/static/css/bootstrap.min.css">
    <link rel="stylesheet" href="/static/css/jquery-ui.min.css">
    <style>
        #middle {
            display: flex;
            flex-direction: row;
            height: calc(100vh - 40px);
        }
        #middle-left, #middle-right {
            flex-grow: 1;
            overflow: auto;
            padding: 10px;
        }
        #middle-divider {
            width: 10px;
            cursor: col-resize;
            background-color: #ccc;
        }
        #middle-right-upper, #middle-right-lower {
            height: 50%;
            overflow: auto;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div id="top" class="row">
            <textarea class="form-control" rows="2"></textarea>
        </div>
        <div id="middle" class="row">
            <div id="middle-left">
                <canvas id="pdf-renderer"></canvas>
            </div>
            <div id="middle-divider"></div>
            <div id="middle-right">
                <div id="middle-right-upper">
                    <p>This is some text in the upper part of the right side.</p>
                </div>
                <div id="middle-right-lower" class="list-group"></div>
            </div>
        </div>
    </div>
    <script src="/static/js/jquery-3.7.0.min.js"></script>
    <script src="/static/js/jquery-ui.min.js"></script>
    <script src="/static/js/pdf.js"></script>
    <script src="/static/js/pdf.worker.js"></script>
    <script src="/static/js/main.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.2.6/pdfobject.min.js"></script>

</body>
</html>


------------------- style.js
body {
    display: flex;
    flex-direction: column;
    height: 100vh;
    margin: 0;
    overflow: hidden;
}

#top {
    flex: 0 0 auto;
    border-bottom: 1px solid #ddd;
    padding: 10px;
}

#middle {
    flex: 1 1 auto;
    display: flex;
    overflow: hidden;
}

#middle-left {
    flex: 1;
    border-right: 1px solid #ddd;
    overflow: auto;
    padding: 10px;
}

#middle-divider {
    flex: 0 0 auto;
    width: 4px;
    background: #ddd;
    cursor: col-resize;
}

#middle-right {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

#middle-right-upper {
    flex: 1;
    border-bottom: 1px solid #ddd;
    overflow: auto;
    padding: 10px;
}

#middle-right-lower {
    flex: 1;
    overflow: auto;
    padding: 10px;
}

.list-group-item {
    cursor: pointer;
}

------------------ main.js
$(function() {
    var pdfjsLib = window['pdfjs-dist/build/pdf'];

    // The workerSrc property shall be specified.
    pdfjsLib.GlobalWorkerOptions.workerSrc = '/pdf.worker.js';

    fetch('http://localhost:9009/pdfs')
    .then(response => response.json())
    .then(data => {
		console.log(data);
        const pdfList = document.getElementById('middle-right-lower');
        data.forEach(file => {
            const listItem = document.createElement('div');
            listItem.textContent = file;
            listItem.className = 'list-group-item';
            listItem.addEventListener('click', function() {
                loadPdf('http://localhost:9009/pdfs/' + file);
            });
            pdfList.appendChild(listItem);
        });
    });

    function loadPdf(url) {
        // Asynchronously downloads PDF.
        var loadingTask = pdfjsLib.getDocument(url);
        loadingTask.promise.then(function(pdf) {
            console.log('PDF loaded');
            
            // Fetch the first page
            var pageNumber = 1;
            pdf.getPage(pageNumber).then(function(page) {
                console.log('Page loaded');
                
                var scale = 1.5;
                var viewport = page.getViewport({scale: scale});

                // Prepare canvas using PDF page dimensions
                var canvas = $("#pdf-renderer")[0];
                var context = canvas.getContext('2d');
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                // Render PDF page into canvas context
                var renderContext = {
                    canvasContext: context,
                    viewport: viewport
                };
                var renderTask = page.render(renderContext);
                renderTask.promise.then(function () {
                    console.log('Page rendered');
                });
            });
        }, function (reason) {
            // PDF loading error
            console.error(reason);
        });
    }

    // Handle resizing of the middle-right area
    $('#middle-divider').draggable({
        axis: 'x',
        containment: 'parent',
        drag: function(event, ui) {
            let totalWidth = $('#middle').width();
            let leftWidth = ui.position.left;
            let rightWidth = totalWidth - leftWidth;
            
            $('#middle-left').css('flex', 'none').width(leftWidth);
            $('#middle-right').css('flex', 'none').width(rightWidth);
        },
        stop: function(event, ui) {
            $('#middle-left').css('flex', '');
            $('#middle-right').css('flex', '');
        }
    });
});

------------- main.js 2
$(document).ready(function() {
    $.ajax({
        url: 'http://localhost:9009/pdfs',
        type: 'GET',
        success: function(res) {
            console.log(res); // Log the response to the console for inspection

            let pdfs = res.files;
            let pdfList = $('#middle-right-lower');
            pdfList.empty();  // Clear existing list

            // Append each PDF as a new list item
            pdfs.forEach(function(pdf) {
                let listItem = $('<div></div>').text(pdf);
                listItem.addClass('list-group-item');
                listItem.on('click', function() {
                    let path = `http://localhost:9009/pdfs/${pdf}`;
                    PDFObject.embed(path, "#middle-left");
                });
                pdfList.append(listItem);
            });
        },
        error: function(xhr, status, error) {
            console.error(xhr.responseText); // Log the error response to the console
        }
    });

    // Handle resizing of the middle-right area
    $('#middle-divider').draggable({
        axis: 'x',
        containment: 'parent',
        drag: function(event, ui) {
            let totalWidth = $('#middle').width();
            let leftWidth = ui.position.left;
            let rightWidth = totalWidth - leftWidth;

            $('#middle-left').css('flex', 'none').width(leftWidth);
            $('#middle-right').css('flex', 'none').width(rightWidth);
        },
        stop: function(event, ui) {
            $('#middle-left').css('flex', '');
            $('#middle-right').css('flex', '');
        }
    });
});



------------- flask server
from flask import Flask, render_template, send_from_directory
import os

app = Flask(__name__, static_folder='static')

@app.route('/')
def serve_index():
    return send_from_directory('.', 'index.html')

@app.route('/static/<path:filename>')
def staticfiles(filename):
    return send_from_directory(app.static_folder, filename)

@app.route('/pdfs')
def list_pdfs():
    files = os.listdir('pdfs')
    return { 'files': files }

@app.route('/pdfs/<path:filename>')
def serve_pdf(filename):
    return send_from_directory('pdfs', filename)
	
@app.route('/search', methods=['POST'])
def search():
    data = request.get_json()
    pdf_filename = data['pdf_filename']
    search_text = data['search_text']

    # Open the PDF file
    with open(pdf_filename, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)

        # Search for the text and get the page and coordinates
        result = []
        for page_num, page in enumerate(pdf_reader.pages, start=1):
            for word in page.extract_text().split():
                if search_text.lower() in word.lower():
                    result.append({
                        'page': page_num,
                        'x': word.bbox[0],
                        'y': word.bbox[3]
                    })

    return jsonify(result)

if __name__ == '__main__':
    app.run(port=9009)

- - - - - - -
pip install flask flask_cors
- - - - - - -
---------------------- folder structure
/app
    /static
        /css
            jquery-ui.min.css
        /js
            jquery-3.7.0.min.js
            main.js
            pdf.js
            pdf.worker.js
    /templates
        index.html
    app.py

================= main.js 3
$(document).ready(function() {
    // Fetch PDFs when page loads and populate list
    $.ajax({
        url: 'http://localhost:9009/pdfs',
        type: 'GET',
        success: function(res) {
            let pdfs = res.files;
            let pdfList = $('#middle-right-lower');
            pdfList.empty();  // Clear existing list

            // Append each PDF as a new list item
            pdfs.forEach(function(pdf) {
                let listItem = $('<div></div>').text(pdf);
                listItem.addClass('list-group-item');
                listItem.on('click', function() {
                    let path = `http://localhost:9009/pdfs/${pdf}`;
                    displayPdf(path);
                });
                pdfList.append(listItem);
            });
        }
    });

    function displayPdf(url) {
        let container = document.getElementById('middle-left');
        container.innerHTML = '';

        // Load the PDF document
        pdfjsLib.getDocument(url)
        .promise.then(function(pdf) {
            // Fetch the first page
            pdf.getPage(1).then(function(page) {
                let canvas = document.createElement('canvas');
                let context = canvas.getContext('2d');
                let viewport = page.getViewport({ scale: 1 });

                canvas.height = viewport.height;
                canvas.width = viewport.width;

                // Render the PDF page on the canvas
                let renderContext = {
                    canvasContext: context,
                    viewport: viewport
                };
                page.render(renderContext).promise.then(function() {
                    container.appendChild(canvas);
                });
            });
        }).catch(function(error) {
            console.error(error);
        });
    }

    // Handle resizing of the middle-right area
    $('#middle-divider').draggable({
        axis: 'x',
        containment: 'parent',
        drag: function(event, ui) {
            let totalWidth = $('#middle').width();
            let leftWidth = ui.position.left;
            let rightWidth = totalWidth - leftWidth;
            
            $('#middle-left').css('flex', 'none').width(leftWidth);
            $('#middle-right').css('flex', 'none').width(rightWidth);
        },
        stop: function(event, ui) {
            $('#middle-left').css('flex', '');
            $('#middle-right').css('flex', '');
        }
    });
});

---------------- do some updates
Given the following existing code which is used to display a PDF document using PDF.js:

$(document).ready(function() {
    // Fetch PDFs when page loads and populate list
    $.ajax({
        url: 'http://localhost:9009/pdfs',
        type: 'GET',
        success: function(res) {
            let pdfs = res.files;
            let pdfList = $('#middle-right-lower');
            pdfList.empty();  // Clear existing list

            // Append each PDF as a new list item
            pdfs.forEach(function(pdf) {
                let listItem = $('<div></div>').text(pdf);
                listItem.addClass('list-group-item');
                listItem.on('click', function() {
                    let path = `http://localhost:9009/pdfs/${pdf}`;
                    displayPdf(path);
                });
                pdfList.append(listItem);
            });
        }
    });

    function displayPdf(url) {
        let container = document.getElementById('middle-left');
        container.innerHTML = '';

        // Load the PDF document
        pdfjsLib.getDocument(url)
        .promise.then(function(pdf) {
            // Fetch the first page
            pdf.getPage(1).then(function(page) {
                let canvas = document.createElement('canvas');
                let context = canvas.getContext('2d');
                let viewport = page.getViewport({ scale: 1 });

                canvas.height = viewport.height;
                canvas.width = viewport.width;

                // Render the PDF page on the canvas
                let renderContext = {
                    canvasContext: context,
                    viewport: viewport
                };
                page.render(renderContext).promise.then(function() {
                    container.appendChild(canvas);
                });
            });
        }).catch(function(error) {
            console.error(error);
        });
    }

    // Handle resizing of the middle-right area
    $('#middle-divider').draggable({
        axis: 'x',
        containment: 'parent',
        drag: function(event, ui) {
            let totalWidth = $('#middle').width();
            let leftWidth = ui.position.left;
            let rightWidth = totalWidth - leftWidth;
            
            $('#middle-left').css('flex', 'none').width(leftWidth);
            $('#middle-right').css('flex', 'none').width(rightWidth);
        },
        stop: function(event, ui) {
            $('#middle-left').css('flex', '');
            $('#middle-right').css('flex', '');
        }
    });
});

given the text entered into the top textarea, Highlight the places in the displayed pdf where the text occurs

--------- 
given the following existing UI code:
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FUEL Prototype</title>
    <link rel="stylesheet" href="/static/css/bootstrap.min.css">
    <link rel="stylesheet" href="/static/css/jquery-ui.min.css">
    <style>
        #middle {
            display: flex;
            flex-direction: row;
            height: calc(100vh - 40px);
        }
        #middle-left, #middle-right {
            flex-grow: 1;
            overflow: auto;
            padding: 10px;
        }
        #middle-divider {
            width: 10px;
            cursor: col-resize;
            background-color: #ccc;
        }
        #middle-right-upper, #middle-right-lower {
            height: 50%;
            overflow: auto;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div id="top" class="row">
            <textarea class="form-control" rows="2"></textarea>
        </div>
        <div id="middle" class="row">
            <div id="middle-left">
                <canvas id="pdf-renderer"></canvas>
            </div>
            <div id="middle-divider"></div>
            <div id="middle-right">
                <div id="middle-right-upper">
                    <p>This is some text in the upper part of the right side.</p>
                </div>
                <div id="middle-right-lower" class="list-group"></div>
            </div>
        </div>
    </div>

</body>
</html>

Change the top textarea from a textarea into a div that contains an inputtext and a button at the right. When the button is clicked, then highlight all occurrences of the text within the PDF document displayed in the middle left element using PDF.js. If there is no pdf displayed, then ignore the button click.

The existing working code to display the PDF document is:
$(document).ready(function() {
    // Fetch PDFs when page loads and populate list
    $.ajax({
        url: 'http://localhost:9009/pdfs',
        type: 'GET',
        success: function(res) {
            let pdfs = res.files;
            let pdfList = $('#middle-right-lower');
            pdfList.empty();  // Clear existing list

            // Append each PDF as a new list item
            pdfs.forEach(function(pdf) {
                let listItem = $('<div></div>').text(pdf);
                listItem.addClass('list-group-item');
                listItem.on('click', function() {
                    let path = `http://localhost:9009/pdfs/${pdf}`;
                    displayPdf(path);
                });
                pdfList.append(listItem);
            });
        }
    });

    function displayPdf(url) {
        let container = document.getElementById('middle-left');
        container.innerHTML = '';

        // Load the PDF document
        pdfjsLib.getDocument(url)
        .promise.then(function(pdf) {
            // Fetch the first page
            pdf.getPage(1).then(function(page) {
                let canvas = document.createElement('canvas');
                let context = canvas.getContext('2d');
                let viewport = page.getViewport({ scale: 1 });

                canvas.height = viewport.height;
                canvas.width = viewport.width;

                // Render the PDF page on the canvas
                let renderContext = {
                    canvasContext: context,
                    viewport: viewport
                };
                page.render(renderContext).promise.then(function() {
                    container.appendChild(canvas);
                });
            });
        }).catch(function(error) {
            console.error(error);
        });
    }

    // Handle resizing of the middle-right area
    $('#middle-divider').draggable({
        axis: 'x',
        containment: 'parent',
        drag: function(event, ui) {
            let totalWidth = $('#middle').width();
            let leftWidth = ui.position.left;
            let rightWidth = totalWidth - leftWidth;
            
            $('#middle-left').css('flex', 'none').width(leftWidth);
            $('#middle-right').css('flex', 'none').width(rightWidth);
        },
        stop: function(event, ui) {
            $('#middle-left').css('flex', '');
            $('#middle-right').css('flex', '');
        }
    });
});

=================== updates for highlighting:
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FUEL Prototype</title>
    <link rel="stylesheet" href="/static/css/bootstrap.min.css">
    <link rel="stylesheet" href="/static/css/jquery-ui.min.css">
    <style>
        #middle {
            display: flex;
            flex-direction: row;
            height: calc(100vh - 40px);
        }
        #middle-left, #middle-right {
            flex-grow: 1;
            overflow: auto;
            padding: 10px;
        }
        #middle-divider {
            width: 10px;
            cursor: col-resize;
            background-color: #ccc;
        }
        #middle-right-upper, #middle-right-lower {
            height: 50%;
            overflow: auto;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div id="top" class="row">
            <div class="input-group">
                <input type="text" class="form-control" id="search-text" placeholder="Enter text">
                <div class="input-group-append">
                    <button class="btn btn-primary" id="search-button">Search</button>
                </div>
            </div>
        </div>
        <div id="middle" class="row">
            <div id="middle-left">
                <canvas id="pdf-renderer"></canvas>
            </div>
            <div id="middle-divider"></div>
            <div id="middle-right">
                <div id="middle-right-upper">
                    <p>This is some text in the upper part of the right side.</p>
                </div>
                <div id="middle-right-lower" class="list-group"></div>
            </div>
        </div>
    </div>

    <script src="/static/js/jquery-3.7.0.min.js"></script>
    <script src="/static/js/jquery-ui.min.js"></script>
    <script src="/static/js/pdf.js"></script>
    <script src="/static/js/pdf.worker.js"></script>
    <script src="/static/js/main.js"></script>
</body>
</html>


---

$(document).ready(function() {
    let pdfDisplayed = false;
    let searchText = "";
    let pdfInstance = null;
    let canvas = null;
    let context = null;

    // Fetch PDFs when page loads and populate list
    $.ajax({
        url: 'http://localhost:9010/pdfs',
        type: 'GET',
        success: function(res) {
            let pdfs = res.files;
            let pdfList = $('#middle-right-lower');
            pdfList.empty();  // Clear existing list

            // Append each PDF as a new list item
            pdfs.forEach(function(pdf) {
                let listItem = $('<div></div>').text(pdf);
                listItem.addClass('list-group-item');
                listItem.on('click', function() {
                    let path = `http://localhost:9010/pdfs/${pdf}`;
                    displayPdf(path);
                });
                pdfList.append(listItem);
            });
        }
    });

    function displayPdf(url) {
        pdfDisplayed = true;
        let container = document.getElementById('middle-left');
        container.innerHTML = '';

        // Load the PDF document
        pdfjsLib.getDocument(url)
            .promise.then(function(pdf) {
                pdfInstance = pdf;

                // Fetch the first page
                pdf.getPage(1).then(function(page) {
                    let viewport = page.getViewport({ scale: 1 });

                    // Create a canvas element
                    canvas = document.createElement('canvas');
                    canvas.id = 'pdf-canvas';
                    container.appendChild(canvas);

                    // Set canvas dimensions
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;

                    // Get canvas context
                    context = canvas.getContext('2d');

                    // Render the PDF page on the canvas
                    let renderContext = {
                        canvasContext: context,
                        viewport: viewport
                    };
                    page.render(renderContext).promise.then(function() {
                        highlightText(searchText);
                    });
                });
            })
            .catch(function(error) {
                console.error(error);
            });
    }

    // Handle resizing of the middle-right area
    $('#middle-divider').draggable({
        axis: 'x',
        containment: 'parent',
        drag: function(event, ui) {
            let totalWidth = $('#middle').width();
            let leftWidth = ui.position.left;
            let rightWidth = totalWidth - leftWidth;

            $('#middle-left').css('flex', 'none').width(leftWidth);
            $('#middle-right').css('flex', 'none').width(rightWidth);
        },
        stop: function(event, ui) {
            $('#middle-left').css('flex', '');
            $('#middle-right').css('flex', '');
        }
    });

    // Handle search button click
    $('#search-button').on('click', function() {
        if (pdfDisplayed) {
            searchText = $('#search-text').val();
            highlightText(searchText);
        }
    });

function highlightText(text) {
  if (!pdfInstance) {
    console.error('PDF document not loaded');
    return;
  }
  if (!canvas || !context) {
    console.error('Canvas element not found');
    return;
  }

  // Clear previous highlights
  context.clearRect(0, 0, canvas.width, canvas.height);

  // Iterate through each page of the PDF
  let numPages = pdfInstance.numPages;

  // Define an array to store the highlight promises
  let highlightPromises = [];

  for (let pageNum = 1; pageNum <= numPages; pageNum++) {
    highlightPromises.push(
      pdfInstance.getPage(pageNum)
        .then(function (page) {
          return page.getTextContent()
            .then(function (textContent) {
              let viewport = page.getViewport({ scale: 1 });
              let transform = viewport.transform;

              context.save();
              context.fillStyle = 'rgba(255, 255, 0, 0.5)';
              context.lineWidth = 1;
              context.strokeStyle = 'rgba(255, 255, 0, 1)';

              textContent.items.forEach(function (textItem) {
                if (textItem.str.includes(text)) {
                  let rect = viewport.convertToViewportRectangle(textItem.transform);

                  context.beginPath();
                  context.rect(rect[0], rect[1], rect[2] - rect[0], rect[3] - rect[1]);
                  context.fill();
                  context.stroke();
                }
              });

              context.restore();
            })
            .catch(function (error) {
              console.error(error);
            });
        })
    );
  }

  // Wait for all highlight promises to resolve
  Promise.all(highlightPromises)
    .then(function () {
      console.log('Text highlighted successfully');
    })
    .catch(function (error) {
      console.error('Error highlighting text:', error);
    });
}

});

================

def convertUrlToLocalPath(pdf_url):
    # Get the last segment of the URL
    filename = pdf_url.split('/')[-1]
    # Join the filename with the local directory path
    local_path = os.path.join('pdfs', filename)
    return local_path

=================

import fitz

def extract_text_from_pdf(pdf_path):
    doc = fitz.open(pdf_path)
    text = ''
    for page in doc:
        text += page.getText()
    return text

pdf_path = 'your_pdf_file.pdf'
extracted_text = extract_text_from_pdf(pdf_path)
print(extracted_text)

====================

from pdfminer.high_level import extract_text

# Specify the path to the PDF file
pdf_path = 'path/to/your/pdf/file.pdf'

# Extract text from the PDF
text = extract_text(pdf_path)

# Print the extracted text
print(text)

===================

// Get a reference to the div element
let divElement = document.getElementById('middle-right-upper');

// Get the paragraph element inside the div
let paragraphElement = divElement.querySelector('p');

// Change the text of the paragraph element
paragraphElement.innerText = 'New text here';

